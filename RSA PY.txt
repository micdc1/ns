import random

# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to generate random prime number
def generate_prime():
    while True:
        p = random.randint(100, 1000)
        if is_prime(p):
            return p

# Function to calculate greatest common divisor
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

# Function to calculate modular inverse
def mod_inverse(a, m):
    m0 = m
    y = 0
    x = 1
    if m == 1:
        return 0
    while a > 1:
        q = a // m
        t = m
        m = a % m
        a = t
        t = y
        y = x - q * y
        x = t
    if x < 0:
        x = x + m0
    return x

# Function to generate public and private keys
def generate_keys():
    # Generate two random prime numbers
    p = generate_prime()
    q = generate_prime()

    # Calculate modulus and totient
    n = p * q
    phi = (p - 1) * (q - 1)

    # Choose public key
    e = 65537
    while gcd(e, phi) != 1:
        e = e + 2

    # Calculate private key
    d = mod_inverse(e, phi)

    # Return public and private keys
    return (e, n), (d, n)

# Function to encrypt message
def encrypt(message, public_key):
    e, n = public_key
    ciphertext = [(ord(char) ** e) % n for char in message]
    return ciphertext

# Function to decrypt ciphertext
def decrypt(ciphertext, private_key):
    d, n = private_key
    plaintext = [chr((char ** d) % n) for char in ciphertext]
    return "".join(plaintext)

# Example usage
message = "HELLO WORLD"
public_key, private_key = generate_keys()
print("Public key:", public_key)
print("Private key:", private_key)
ciphertext = encrypt(message, public_key)
print("Encrypted message:", ciphertext)
decrypted_message = decrypt(ciphertext, private_key)
print("Decrypted message:", decrypted_message)
